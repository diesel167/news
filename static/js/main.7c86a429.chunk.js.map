{"version":3,"sources":["utils/GeoApi.js","Components/UserData.js","utils/WeatherApi.js","Components/Weather.js","utils/NewsApi.js","Components/NewsItem.js","Components/News.js","Components/Navigation.js","Components/Footer.js","Components/NewsToggler.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["axios","create","baseURL","responseType","UserData","useState","isInitial","setInitial","city","useSelector","state","country","dispatch","useDispatch","useEffect","Geo","get","then","e","type","payload","lat","data","lon","capital_ru","name_ru","content","className","Weather","coordinates","temperature","deg","DOMParser","parseFromString","body","textContent","Wea","temp","NewsItem","news","showList","list","map","item","i","end","begin","getElementsByTagName","url","getAttribute","slice","filter","media","push","key","String","Symbol","href","innerHTML","src","alt","concat","News","NewsApi","xmlDoc","arrOfNews","Navigation","parser","tofirst","tolast","count","Math","ceil","length","currentPage","setCurrentPage","setPageNum","changeEvent","target","onClick","buttonsNum","j","style","color","generatePageNumButtons","Footer","NewsToggler","lastNews","setLastNews","onChange","App","loading","Boolean","window","location","hostname","match","initialState","rootReducer","action","Object","assign","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7c86a429.chunk.js","sourcesContent":["import axios from \"axios\";\r\n//get Geo data for user\r\nexport default axios.create({\r\n  baseURL: \"https://api.sypexgeo.net/\",\r\n  responseType: \"json\"\r\n});","import React, { useEffect, useState } from 'react';\r\nimport Geo from '../utils/GeoApi'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\n\r\nfunction UserData() {\r\n  let [isInitial,setInitial] = useState(true);\r\n  const city = useSelector(state => state.city);\r\n  const country = useSelector(state => state.country);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect( ()=>{\r\n    //get geo data for user\r\n    if(isInitial){\r\n      setInitial(false); //to prevent rerenders\r\n      Geo.get('/').then((e)=>{\r\n        dispatch({type: 'COORDINATES', payload: {lat:e.data.country.lat ,lon:e.data.country.lon}});\r\n        dispatch({type: 'CITY', payload: e.data.country.capital_ru});\r\n        dispatch({type: 'COUNTRY', payload: e.data.country.name_ru});\r\n      });\r\n    }\r\n  }, [isInitial, dispatch]);\r\n\r\n  let content = <div>It will be the weather at your city</div>;\r\n  if(city && country ){\r\n    content = `Сейчас в ${city}, ${country}:\\xa0`;\r\n  }\r\n\r\n  return (\r\n      <div className=\"user-data\">\r\n        {content}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default UserData;","import axios from \"axios\";\r\n//get Geo data for user\r\nexport default axios.create({\r\n  baseURL: \"https://api.weatherbit.io/v2.0/current\",\r\n  responseType: \"json\"\r\n});","import React, { useEffect } from 'react';\r\nimport Wea from '../utils/WeatherApi'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport './Weather.css'\r\nfunction Weather() {\r\n  const dispatch = useDispatch();\r\n  const coordinates = useSelector(state => state.coordinates);\r\n  const temperature = useSelector(state => state.temperature);\r\n  const parser = new DOMParser();\r\n  const deg = parser.parseFromString(`<!doctype html><body>\t&#176;`, 'text/html').body.textContent;\r\n\r\n  useEffect( ()=>{\r\n    //get geo data for user\r\n    if(coordinates){\r\n      Wea.get(`/?lat=${coordinates.lat}&lon=${coordinates.lon}&key=e50813fb6b9044cf98685ba2d687c329`).then((e)=>{\r\n        dispatch({type: 'TEMPERATURE', payload: e.data.data[0].temp});\r\n      });\r\n    }\r\n  });\r\n\r\n  return <div className='weather'>{temperature?`${temperature}${deg}`:''}</div>\r\n}\r\n\r\nexport default Weather;","import axios from \"axios\";\r\n//get Geo data for user\r\nexport default axios.create({\r\n  baseURL: \"https://cors-anywhere.herokuapp.com/https://news.tut.by/rss/\",\r\n  responseType: \"xml\"\r\n});","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport './NewsItem.css'\r\n\r\nfunction NewsItem() {\r\n  const news = useSelector(state => state.news);\r\n  const showList = useSelector(state => state.showList);\r\n  let list =[];\r\n  if(news){\r\n    news.map((item, i)=>{\r\n      if(i<showList.end && i>=showList.begin){\r\n        //if real news instead of commercial\r\n        if(item.getElementsByTagName('enclosure')[0]){\r\n          let url = item.getElementsByTagName('enclosure')[0].getAttribute('url');// url for image\r\n          //if there is not title image we get the first image in the article\r\n          if(url.slice(-3)==='mp4'){\r\n            url = [...item.getElementsByTagName('media:content')]\r\n                .filter(media=>media.getAttribute('url').slice(-3)!=='mp4')[0].getAttribute('url');\r\n          }\r\n          list.push(<div className='news-item' key={String(Symbol(i))}>\r\n            <a className='link' href={item.getElementsByTagName('link')[0].innerHTML}>\r\n              <img className='image' src={url} alt=\"Article visual content\"/>\r\n              <div className='title'>\r\n                {item.getElementsByTagName('title')[0].innerHTML}\r\n              </div>\r\n            </a>\r\n          </div>)\r\n        }\r\n      }\r\n      return 1\r\n    })\r\n  }\r\n  return <>{list.concat('')}</>\r\n}\r\n\r\nexport default NewsItem;","import React, { useEffect } from 'react';\r\nimport NewsApi from \"../utils/NewsApi\";\r\nimport NewsItem from \"./NewsItem\";\r\n\r\nimport { useDispatch, useSelector} from \"react-redux\";\r\n\r\nfunction News() {\r\n  const dispatch = useDispatch();\r\n  let url = useSelector(state=>state.url);\r\n  useEffect( ()=>{\r\n  //get news\r\n      NewsApi.get(url).then((e)=>{\r\n        let parser = new DOMParser();\r\n        let xmlDoc = parser.parseFromString(e.data,\"text/xml\");\r\n        let arrOfNews = [...xmlDoc.getElementsByTagName('item')];\r\n        dispatch({type: 'NEWS', payload: arrOfNews});\r\n      });\r\n\r\n  },[url, dispatch]);\r\n\r\n  return <div className='news'>\r\n    <NewsItem/>\r\n  </div>\r\n}\r\n\r\nexport default News;","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n\r\nfunction Navigation() {\r\n\r\n  const parser = new DOMParser();\r\n  const tofirst = parser.parseFromString(`<!doctype html><body>\t&#171;`, 'text/html').body.textContent;\r\n  const tolast = parser.parseFromString(`<!doctype html><body>\t&#187;`, 'text/html').body.textContent;\r\n  const dispatch = useDispatch();\r\n  const news = useSelector(state => state.news);\r\n  let count = 0;  //how many pages we have\r\n  const newsPerPage = 12; //if 12 news per page\r\n  if(news){\r\n    count = Math.ceil(news.length / newsPerPage);\r\n  }\r\n\r\n  let [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const setPageNum = (changeEvent) => {\r\n    if(typeof(changeEvent)==='number'){\r\n      let begin = changeEvent*newsPerPage-newsPerPage;\r\n      let end = changeEvent*newsPerPage > news.length ? news.length : changeEvent*newsPerPage;\r\n      dispatch({type: 'CHANGE_SHOWING', payload: {begin: begin, end: end}});\r\n      setCurrentPage(changeEvent);\r\n    }\r\n    else{\r\n      let begin = changeEvent.target.innerHTML*newsPerPage-newsPerPage;\r\n      let end = changeEvent.target.innerHTML*newsPerPage > news.length ? news.length : changeEvent.target.innerHTML*newsPerPage;\r\n      dispatch({type: 'CHANGE_SHOWING', payload: {begin: begin, end: end}});\r\n      setCurrentPage(changeEvent.target.innerHTML);\r\n    }\r\n\r\n  };\r\n\r\n  const generatePageNumButtons = () => {\r\n    let buttonsNum = [];\r\n    let i;\r\n    //dont move 'radio' navigation at the beginning\r\n    if(currentPage<=3 || count<=5){\r\n      i = 1;\r\n    }\r\n    //move 'radio' navigation\r\n    if(currentPage>3 && count>5 && currentPage <= count-2){\r\n      i = currentPage-2;\r\n    }\r\n    //dont move 'radio' navigation in the end\r\n    if(currentPage>3 && count>5 && currentPage>count-2){\r\n      i = count-4;\r\n    }\r\n    for(let j = i; j <= i+4; j++){\r\n      let temp ='';\r\n      if(j<=count){\r\n        temp = <div key={count*j} className=\"btn\" onClick={setPageNum}>{j}</div>;\r\n      }\r\n      if(+j === +currentPage){\r\n        temp = <div key={count*j} className=\"btn\" style={{color:'white'}} onClick={setPageNum}>{j}</div>;\r\n      }\r\n      buttonsNum.push(temp);\r\n    }\r\n    return buttonsNum;\r\n  };\r\n\r\n  return <div className='navbar'>\r\n    <div className=\"btn\" onClick={()=>setPageNum(1)}>{tofirst}</div>\r\n      {generatePageNumButtons()}\r\n       | of {count}\r\n    <div className=\"btn\" onClick={()=>setPageNum(count)}>{tolast}</div>\r\n  </div>\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport './Footer.css';\r\n\r\nexport default function Footer() {\r\n  return(\r\n      <div className='footer'>\r\n        <p>News data have been recieved from <a href=\"https://www.tut.by/\">TUT.BY</a> RSS</p>\r\n        <p>Develeoped by <a href=\"https://www.linkedin.com/in/yury-misiyevich\">Yury Misiyevich</a></p>\r\n      </div>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport './NewsToggler.css'\r\n\r\nfunction NewsToggler() {\r\n  const dispatch = useDispatch();\r\n  const [lastNews, setLastNews] = useState('lastNews');\r\n  useEffect( ()=>{\r\n    if(lastNews === 'mainNews'){\r\n      dispatch({type: 'CHANGE_URL', payload: '/index.rss'});\r\n    }\r\n    else{\r\n      dispatch({type: 'CHANGE_URL', payload: '/all.rss'});\r\n    }\r\n  },[lastNews, dispatch]);\r\n  return <div className=\"news-toggler\">\r\n    <p className='choose-news'>Последние новости</p>\r\n    <div className='switch-wrapper'>\r\n      <label className=\"switch\">\r\n        <input type=\"checkbox\"\r\n               onChange={()=>{\r\n                 if(lastNews === 'mainNews'){\r\n                   setLastNews('lastNews');\r\n                 }\r\n                 else{\r\n                   setLastNews('mainNews');\r\n                 }\r\n               }}/>\r\n        <span className=\"slider round\"/>\r\n      </label>\r\n    </div>\r\n    <p className='choose-news'>Главные новости</p>\r\n  </div>\r\n}\r\n\r\nexport default NewsToggler;","import React from 'react';\r\nimport './App.css';\r\nimport UserData from \"./Components/UserData\";\r\nimport Weather from \"./Components/Weather\";\r\nimport News from \"./Components/News\";\r\nimport Navigation from \"./Components/Navigation\";\r\nimport Footer from \"./Components/Footer\";\r\nimport { RingLoader } from 'react-spinners';\r\nimport { useSelector } from \"react-redux\";\r\nimport NewsToggler from \"./Components/NewsToggler\";\r\nimport './normalize.css'\r\n\r\nfunction App() {\r\n  const news = useSelector(state => state.news);\r\n  return (\r\n    <div className=\"app\">\r\n      <div className='header'>\r\n        <div className=\"info\">\r\n          <div className=\"logo\">news.</div>\r\n          <UserData/>\r\n          <Weather/>\r\n        </div>\r\n        <NewsToggler/>\r\n      </div>\r\n      <News/>\r\n      <div className={`loader ${!news?'':'hide'}`}>\r\n        <RingLoader\r\n            color={'#123abc'}\r\n            loading={!news}\r\n        />\r\n      </div>\r\n      <Navigation/>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const initialState = {\r\n  city: null,\r\n  country: null,\r\n  coordinates: null,\r\n  temperature: null,\r\n  news: null,\r\n  showList: {begin: 0, end: 12},\r\n  url: '/all.rss'\r\n};\r\n\r\nfunction rootReducer(state= initialState, action) {\r\n  switch (action.type) {\r\n    case 'CITY':\r\n        return Object.assign({},state,{city: action.payload});   //change only city field in our state\r\n    case 'COUNTRY':\r\n        return Object.assign({},state,{country: action.payload});\r\n    case 'COORDINATES':\r\n      return Object.assign({},state,{coordinates: action.payload});\r\n    case 'TEMPERATURE':\r\n      return Object.assign({},state,{temperature: action.payload});\r\n    case 'NEWS':\r\n      return Object.assign({},state,{news: action.payload});\r\n    case 'CHANGE_SHOWING':\r\n      return Object.assign({},state,{showList: action.payload});\r\n    case 'CHANGE_URL':\r\n      return Object.assign({},state,{url: action.payload});\r\n    default:\r\n        return state\r\n  }\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {createStore} from \"redux\";\r\nimport {Provider} from \"react-redux\"\r\nimport rootReducer from \"./reducers/rootReducer\"\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(<Provider store={store}><App/></Provider>,document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}